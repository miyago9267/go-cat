name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    name: Build & Release
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Get short commit hash
        id: vars
        run: echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build binary
        id: build
        run: |
          mkdir -p dist
          output_name="go-cat-${{ matrix.goos }}-${{ matrix.goarch }}-${{ steps.vars.outputs.hash }}"
          if [ "${{ matrix.goos }}" == "windows" ]; then
            output_name="${output_name}.exe"
          fi
          echo "output_name=${output_name}" >> $GITHUB_OUTPUT

          echo "Building ${output_name}..."
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -v -o dist/${output_name} ./cmd

          if [ ! -f dist/${output_name} ]; then
            echo "Build failed: dist/${output_name} not found"
            exit 1
          fi

      - name: Debug dist content
        run: ls -alh dist

      - name: Archive binary
        run: |
          if [ ! -f dist/${{ steps.build.outputs.output_name }} ]; then
            echo "Error: dist/${{ steps.build.outputs.output_name }} does not exist"
            exit 1
          fi

          if [ "${{ matrix.goos }}" == "windows" ]; then
            zip dist/${{ steps.build.outputs.output_name }}.zip dist/${{ steps.build.outputs.output_name }}
            rm dist/${{ steps.build.outputs.output_name }}
          else
            tar -czvf dist/${{ steps.build.outputs.output_name }}.tar.gz -C dist ${{ steps.build.outputs.output_name }}
            rm dist/${{ steps.build.outputs.output_name }}
          fi

      - name: Upload release asset
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*